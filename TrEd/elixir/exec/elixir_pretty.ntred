#!/usr/bin/ntred

package TredMacro;

use Encode;

use Data::Dumper;

$Data::Dumper::Terse = 1;

use strict;


our ($root, $this);

our $null = 1;  # strings longer than $null become character lists

our $zero = 'A';

our $max = 100;


sub escape ($) {

    my $text = $_[0];

    return '<' . $text . '>';
}

sub render ($) {

    return encode "utf8", escape $_[0];
}

sub charify ($) {

    local $Data::Dumper::Useqq;

    $Data::Dumper::Useqq = 0;

    return '[' . (join ',', map { substr Data::Dumper->Dump(['\'' . $_]), 2, -1 } split //, $_[0]) . ']';
}

sub stringify ($) {

    local $Data::Dumper::Useqq;

    $Data::Dumper::Useqq = 1;

    return substr Data::Dumper->Dump(["\"" . $_[0]]), 2, -1;     # 100 -> "100"
}


sub pretty_cluster {

    my ($root, $idx) = @_;

    $idx = sprintf "%-3d", $idx;

    return join "", "cluster_$idx = cluster", "\n\n", map { pretty_nest($_) } $root->children();
}

sub pretty_nest {

    my ($root) = @_;

    return  ' |> ' . ($root->{'root'} =~ / / ? stringify $root->{'root'} : charify $root->{'root'}) . ' <| [' . "\n\n" .

            ( join ",\n\n", map { pretty_entry($_) } $root->children() ) .

            ' ]' . "\n\n";
}

sub pretty_entry {

    my ($root) = @_;

    my $morphs = $root->{'morphs'};
    my $entity = ElixirFM::entity($root);
    my $limits = $root->{'limits'};
    my $reflex = $root->{'reflex'};

    my $domain = $limits->{'fst'} || '';

    $domain = '"' . $domain . '"' unless $domain eq '';

    my $merged = ElixirFM::merge($root->parent()->{'root'}, $morphs);

    my $imperf = $entity->[1]{'imperf'} || [];
    my $pfirst = $entity->[1]{'pfirst'} || [];
    my $second = $entity->[1]{'second'} || [];
    my $masdar = $entity->[1]{'masdar'} || [];

    my $plural = $entity->[1]{'plural'} || [];
    my $femini = $entity->[1]{'femini'} || [];

    my $except = $entity->[1]{'except'} || '';

    my $derive = $entity->[1]{'derive'} || '';

    $derive = "otherwise" if $derive eq '------F---';

    return sprintf "    %-25s %-9s %-22s %s%s",

                   $morphs, '`' . (lcfirst $entity->[0]) . '`', '{- ' . escape($merged) . ' -}',

                   (join "\n" . ' ' x 27,

                   '[ ' . (join ", ", map { pretty_words($_, $morphs) } @{$reflex}) . ' ]',

                   (@{$imperf} > 0 ? map { '   `imperf`     ' . $_ } @{$imperf} : ()),
                   (@{$pfirst} > 0 ? map { '   `pfirst`     ' . $_ } @{$pfirst} : ()),
                   (@{$second} > 0 ? map { '   `second`     ' . $_ } @{$second} : ()),
                   (@{$masdar} > 0 ? map { '   `masdar`     ' . $_ } @{$masdar} : ()),

                   (@{$plural} > 0 ? map { '   `plural`     ' . $_ } @{$plural} : ()),
                   (@{$femini} > 0 ? map { '   `femini`     ' . $_ } @{$femini} : ()),

                   ($domain ne '' ? "\n" . '    `limited` ' . $domain : ()),
                   ($except ne '' ? "\n" . '    `excepts` ' . $except : ()),
                   ($derive ne '' ? "\n" . '    `derives` ' . $derive : ()));
}

sub pretty_words ($$) {

    my $data = shift;

    my @data = split ' ', $data;    # grep { $_ ne '' } map { split /([\+\-\=\?\!\/\(\)])/, $_ }

    $data = join ', ', map { $null > 0 && length $_ > $null ?
                             charify   $_ :
                             stringify $_ } @data;

    $data = "unwords [ " . $data  . " ]" if @data > 1;

    return $data;
}

# ##################################################################################################
#
# ##################################################################################################

sub autostart {

    my (undef, undef, $type, $group) = reverse split /[\-\.\/\\]/, FileName();

    die "The group and type '$group'/'$type' cannot be empty" if $group eq '' or $type eq '';

    $group = ucfirst $group;
    $type  = ucfirst $type;

    my $module = $zero;
    my $idx = 0;

    local $\ = "\n";

    beginLexicon($group, $type);

    my @tree = GetTrees();

    while ($root = shift @tree) {

        next unless $root->children();

        beginModule($group, $type, $module) unless $idx;

        print pretty_cluster($root, ++$idx);

        next if $idx < $max and @tree;

        closeModule($idx);

        last unless @tree;

        $idx = 0;

        $module++;
    }

    closeModule($idx);

    closeLexicon($group, $type, $module);
}


sub beginLexicon {

    my ($group, $type) = @_;

    mkdir "$group" unless -e "$group";

    mkdir "$group/$type" unless -e "$group/$type";

    return;
}

sub closeLexicon {

    my ($group, $type, $module) = @_;

    open C, '>', "$group/$type.hs" or die "Cannot create $group/$type.hs";

    select C;

    print << "    return;";

module Elixir.Data.$group.$type (chapter) where

import Elixir.Lexicon

    return;

    print map { "import qualified Elixir.Data.$group.$type.$_ as $_\n" } $zero .. $module;

    print << "    return;";

lexicon = (concat . concat) chapter

    return;

    print "chapter = [ " . (join ",\n" . " " x 12, map { "$_.section" } $zero .. $module) . " ]";

    close C;

    return;
}


sub beginModule ($) {

    my ($group, $type, $module) = @_;

    open C, '>', "$group/$type/$module.hs" or die "Cannot create $group/$type/$module.hs";

    select C;

    my $listing = "include section";

    print << "    return;";

module Elixir.Data.$group.$type.$module (section) where

import Elixir.Lexicon


lexicon = $listing

    return;

    return;
}

sub closeModule($) {

    my ($idx) = @_;

    print "section = [ " . (join ",\n" . " " x 12, map { "cluster_$_" } 1 .. $idx) . " ]";

    close C;

    return;
}
